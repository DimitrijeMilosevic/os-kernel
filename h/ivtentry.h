#ifndef IVTENTRY_H_
#define IVTENTRY_H_

#include "kernev.h"

class IVTEntry {
public:

	IVTEntry(IVTNo ivtNo, pInterrupt newRoutine);
	~IVTEntry();

	void callOldRoutine();
	void signal();
	/*
	IVT has 256 entries.
	allEvents static array stores pointers towards each Event object ever registered in any of these entries.
	allRoutines static array stores pointers towards all of the interrupt routines ever generated by PREPAREENTRY macro
	*/
	static KernelEv* allEvents[256];
	static pInterrupt allRoutines[256];

	friend class KernelEv;
private:
	IVTNo ivtNo;
};

/*
PREPAREENTRY has two arguments:
	1) numEntry - which entry of the IVT needs to get 'prepared'
	2) callOld - a flag that tells whether or not the oldRoutine should be called in the interrupt routine as well
PREPAREENTRY macro serves the purpose of generating interrupt routine and registering it in the matching entry of the IVT.
*/

#define PREPAREENTRY(numEntry, callOld)\
	void interrupt inter##numEntry(...);\
	IVTEntry newEntry##numEntry(numEntry, inter##numEntry);\
	void interrupt inter##numEntry(...){\
		newEntry##numEntry.signal();\
		if (callOld == 1){\
			newEntry##numEntry.callOldRoutine();\
		}\
	}

#endif
